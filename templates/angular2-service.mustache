import { Injectable } from 'angular2/angular2';
import { Http, Response, Headers } from 'angular2/http';
{{#definitions}}
import { {{name}} } from './models/{{&className}}_models';
{{/definitions}} 

@Injectable()
export class {{&className}}ApiClientService {
	
	domain:string;
	
	constructor(public http: Http, options?: any) {
		var domain = (typeof options === 'object') ? options.domain : options;
		this.domain = typeof(domain) === 'string' ? domain : '{{&domain}}';
		
		if(this.domain.length === 0) {
			throw new Error('Domain parameter must be specified as a string.');
		}
		
		{{#isSecure}}
			this.token = (typeof options === 'object') ? (options.token ? options.token : {}) : {};
		{{/isSecure}}
	}


{{#methods}}
	/**
	* {{&summary}}
	* @method
	* @name {{&methodName}}
	{{#parameters}}
	{{^isSingleton}}* @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
	{{/parameters}}
	* 
	*/
	public {{&methodName}}({{#parameters}}{{&camelCaseName}}: {{typescriptType}}{{^last}}, {{/last}}{{/parameters}}) {
		var uri = '{{&path}}';
		var payload = {};	
		var queryParameters = {};
		let headers = new Headers();
		headers.append('Content-Type', 'application/json');
		
{{#parameters}}
			{{#isQueryParameter}}
			{{#isSingleton}}
		queryParameters['{{&name}}'] = '{{&singleton}}';
			{{/isSingleton}}
			{{^isSingleton}}
			{{#isPatternType}}
		Object.keys(parameters).forEach(function(parameterName) {
			if(new RegExp('{{&pattern}}').test(parameterName)){
				queryParameters[parameterName] = parameters[parameterName];
			}
		});
			{{/isPatternType}}
			{{^isPatternType}}
		if(parameters['{{&camelCaseName}}'] !== undefined){
			queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}'];
		}
			{{/isPatternType}}
			{{/isSingleton}}
			{{/isQueryParameter}}
			{{#isPathParameter}}
		uri = uri.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', {{&camelCaseName}});
			{{/isPathParameter}}
			{{#isHeaderParameter}}
			{{#isSingleton}}
		headers.append('{{&name}}', '{{&singleton}}');
			{{/isSingleton}}
			{{^isSingleton}}
		if(parameters['{{&camelCaseName}}'] !== undefined){
			headers.append('{{&name}}', parameters['{{&camelCaseName}}']);
		}
			{{/isSingleton}}
			{{/isHeaderParameter}}
			{{#isBodyParameter}}
		payload['{{&name}}'] = {{&camelCaseName}};
			{{/isBodyParameter}}
			{{#isFormParameter}}
			{{#isSingleton}}
		form['{{&name}}'] = '{{&singleton}}';
			{{/isSingleton}}
			{{^isSingleton}}
		if(parameters['{{&camelCaseName}}'] !== undefined){
			form['{{&name}}'] = parameters['{{&camelCaseName}}'];
		}
			{{/isSingleton}}
			{{/isFormParameter}}
{{/parameters}}		
	
		return this.http
			.{{angular2httpMethod}}(this.domain + uri, payload, { headers: headers, params: queryParameters })
			.map((res: Response) => {
			   {{#hasJsonResponse}}
               var result = res.json();
			   {{/hasJsonResponse}}
			   {{^hasJsonResponse}}
			   var result = null;
			   
			   // TODO: this method does not return JSON response, so you need to handle response by your own
			   {{/hasJsonResponse}}
			   
               return result;
            });
	}
	
{{/methods}}

}